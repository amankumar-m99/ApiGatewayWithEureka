server.port=8070

#Service Id
spring.application.name=ApiGatewayWithEureka

#Instance Id
eureka.instance.instance-id=${spring.application.name}:${random.value}

#Eureka location
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

#Option 1: Force IP address instead of hostname
#This tells Eureka to register your service using your actual IP instead of the PC name.
eureka.instance.prefer-ip-address=false

#Option 2: Set a fixed hostname manually
#Use this only in local development.
#It breaks things in distributed environments where localhost refers to the service itself.
#eureka.instance.hostname=127.0.0.1


spring.cloud.gateway.server.webflux.routes[0].id=service1
spring.cloud.gateway.server.webflux.routes[0].uri=lb://ApiGatewayWithEurekaMS1
spring.cloud.gateway.server.webflux.routes[0].predicates[0]=Path=/service1/**
spring.cloud.gateway.server.webflux.routes[0].predicates[1]=Method=GET,POST
spring.cloud.gateway.server.webflux.routes[0].filters[0]=AddRequestHeader=Authorization, Basic Json.web.token.fromPropsFile
spring.cloud.gateway.server.webflux.routes[0].filters[1]=AddResponseHeader=process-mode, Success

spring.cloud.gateway.server.webflux.routes[1].id=service2
spring.cloud.gateway.server.webflux.routes[1].uri=lb://ApiGatewayWithEurekaMS2
spring.cloud.gateway.server.webflux.routes[1].predicates[0]=Path=/service2/**
spring.cloud.gateway.server.webflux.routes[1].predicates[1]=Method=GET,POST
spring.cloud.gateway.server.webflux.routes[1].filters[0]=AddRequestHeader=Authorization, Basic Json.web.token.fromPropsFile
spring.cloud.gateway.server.webflux.routes[1].filters[1]=AddResponseHeader=process-mode, Success
